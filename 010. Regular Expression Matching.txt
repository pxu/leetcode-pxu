Given an input string (s) and a pattern (p), implement regular expression matching with support for '.' and '*'.

'.' Matches any single character.
'*' Matches zero or more of the preceding element.
The matching should cover the entire input string (not partial).

Note:

s could be empty and contains only lowercase letters a-z.
p could be empty and contains only lowercase letters a-z, and characters like . or *.
Example 1:

Input:
s = "aa"
p = "a"
Output: false
Explanation: "a" does not match the entire string "aa".
Example 2:

Input:
s = "aa"
p = "a*"
Output: true
Explanation: '*' means zero or more of the precedeng element, 'a'. Therefore, by repeating 'a' once, it becomes "aa".
Example 3:

Input:
s = "ab"
p = ".*"
Output: true
Explanation: ".*" means "zero or more (*) of any character (.)".
Example 4:

Input:
s = "aab"
p = "c*a*b"
Output: true
Explanation: c can be repeated 0 times, a can be repeated 1 time. Therefore it matches "aab".
Example 5:

Input:
s = "mississippi"
p = "mis*is*p*."
Output: false

solution 1: dp
class Solution {
    public boolean isMatch(String s, String p) {
        if(p.isEmpty()){
            return s.isEmpty();
        }
        
        int m = s.length();
        int n = p.length();
        boolean dp[][] = new boolean[m+1][n+1];
        dp[0][0] = true;
        
        for(int row = 1; row <= m; row++){
            dp[row][0] = false;
        }
        
        for(int col = 1; col <=n; col++){
            dp[0][col] = (col > 1) && p.charAt(col-1) == '*' && dp[0][col-2];
        }
        
        for(int row = 1; row <= s.length(); row++){
            for(int col = 1; col <= p.length(); col++){
                if(p.charAt(col-1) == '*'){
                    dp[row][col] = dp[row][col-2] || (s.charAt(row-1) == p.charAt(col-2) || p.charAt(col-2) == '.') && dp[row-1][col]; 
                }else{
                    dp[row][col] = dp[row-1][col-1] && (s.charAt(row-1) == p.charAt(col-1) || p.charAt(col-1) == '.');
                }
                
            }
        }
        
       return dp[s.length()][p.length()];
    }
}



solution 2(recursion):
class Solution {
    public boolean isMatch(String s, String p) {
        if(p.isEmpty()){
            return s.isEmpty();
        }

        
        boolean firstMatch = !s.isEmpty() && (p.charAt(0) == '.' || s.charAt(0) == p.charAt(0));
        
        if(p.length()>=2 && p.charAt(1) == '*'){
            return isMatch(s, p.substring(2)) ||
                firstMatch && isMatch(s.substring(1), p);
        }else{
            return firstMatch && isMatch(s.substring(1), p.substring(1));
        }
        
    }
}
