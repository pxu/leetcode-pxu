Given a collection of numbers that might contain duplicates, return all possible unique permutations.

Example:

Input: [1,1,2]
Output:
[
  [1,1,2],
  [1,2,1],
  [2,1,1]
]


class Solution {
    public List<List<Integer>> permuteUnique(int[] nums) {
        List<List<Integer>> res = new ArrayList<>();
        if(nums == null || nums.length == 0) return res;
        
        Arrays.sort(nums);
        boolean status[] = new boolean[nums.length];
        backtrack(res, new ArrayList<Integer>(),nums,status);
        return res;
    }
    
    private void backtrack(List<List<Integer>> res, List<Integer> currList, int[] nums, boolean status[]){
        if(currList.size() == nums.length){
            res.add(new ArrayList<Integer>(currList));
        }else{
            for(int i = 0; i < nums.length; i++){
                /*
                上面的判断主要是为了去除重复元素影响。
                比如，给出一个排好序的数组，[1,2,2]，那么第一个2和第二2如果在结果中互换位置，
                我们也认为是同一种方案，所以我们强制要求相同的数字，原来排在前面的，在结果
                当中也应该排在前面，这样就保证了唯一性。所以当前面的2还没有使用的时候，就
                不应该让后面的2使用。
                */
                if(status[i] || (i > 0 && nums[i] == nums[i-1] && status[i-1] == false)) continue;
                status[i] = true;
                currList.add(nums[i]);
                backtrack(res, currList,nums, status);
                currList.remove(currList.size()-1);
                status[i] = false;
            }
            
        }
        
    }
}
