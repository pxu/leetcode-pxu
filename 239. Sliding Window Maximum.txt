239. Sliding Window Maximum
Given an array nums, there is a sliding window of size k which is moving from the very left of the array to the very right. You can only see the k numbers in the window. Each time the sliding window moves right by one position. Return the max sliding window.

Example:

Input: nums = [1,3,-1,-3,5,3,6,7], and k = 3
Output: [3,3,5,5,6,7] 
Explanation: 

Window position                Max
---------------               -----
[1  3  -1] -3  5  3  6  7       3
 1 [3  -1  -3] 5  3  6  7       3
 1  3 [-1  -3  5] 3  6  7       5
 1  3  -1 [-3  5  3] 6  7       5
 1  3  -1  -3 [5  3  6] 7       6
 1  3  -1  -3  5 [3  6  7]      7
Note: 
You may assume k is always valid, 1 ≤ k ≤ input array's size for non-empty array.

Follow up:
Could you solve it in linear time?

solution: sliding window with deque
class Solution {
    public int[] maxSlidingWindow(int[] nums, int k) {
        ArrayDeque<Integer> deque = new ArrayDeque<>();
        
        if(nums.length < k){
            return null;
        }
        
        int res[] = new int[nums.length - k + 1];
        int index= 0;
        
        for(int i = 0; i <k; i++){
            while(!deque.isEmpty() && nums[i] > deque.peekLast()){
                deque.removeLast();
            }
            deque.addLast(i);
            
        }
        res[index++] = deque.peekFirst();
        
        for(int i = k ; i< nums.length; i++){
            while(!deque.isEmpty() && nums[i] > deque.peekLast()){
                deque.removeLast();
            }
            
            while(!deque.isEmpty() && deque.peekFirst() <= (i-k)){
                deque.removeFirst();
            }
            
            deque.addLast(i);
            res[index++] = nums[deque.peekFirst()];
        }
        
        return res;
    }
}
