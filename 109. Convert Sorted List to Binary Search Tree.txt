Given a singly linked list where elements are sorted in ascending order, convert it to a height balanced BST.

For this problem, a height-balanced binary tree is defined as a binary tree in which the depth of the two subtrees of every node never differ by more than 1.

Example:

Given the sorted linked list: [-10,-3,0,5,9],

One possible answer is: [0,-3,9,-10,null,5], which represents the following height balanced BST:

      0
     / \
   -3   9
   /   /
 -10  5

/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode(int x) { val = x; }
 * }
 */
/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) { val = x; }
 * }
 */
class Solution {
  ListNode currNode;
    public TreeNode sortedListToBST(ListNode head) {
       // write your code here
        if(head == null){
            return null;
        }
        currNode = head;
        ListNode pointer = head;
        int n = 0;
        while(pointer != null){
            n++;
            pointer = pointer.next;
        }
        
        return sortedListToBSTRecur(0, n-1);
        
            
    }

                             
     private TreeNode sortedListToBSTRecur(int start, int end){
        if(start > end){
            return null;
        }
        
        int mid = start + (end - start)/2;
        TreeNode left = sortedListToBSTRecur(start, mid -1);
        TreeNode root = new TreeNode(currNode.val);
        root.left = left;
        currNode = currNode.next;
        root.right = sortedListToBSTRecur(mid +1 ,end);

        return root;
        
    }
}
                                       
