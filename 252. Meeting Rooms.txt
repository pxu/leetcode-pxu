252. Meeting Rooms
Given an array of meeting time intervals consisting of start and end times [[s1,e1],[s2,e2],...] (si < ei), determine if a person could attend all meetings.

Example 1:

Input: [[0,30],[5,10],[15,20]]
Output: false
Example 2:

Input: [[7,10],[2,4]]
Output: true

solution: sort start and get max end and compare with the new start

/**
 * Definition for an interval.
 * public class Interval {
 *     int start;
 *     int end;
 *     Interval() { start = 0; end = 0; }
 *     Interval(int s, int e) { start = s; end = e; }
 * }
 */
class Solution {
    public boolean canAttendMeetings(Interval[] intervals) {
        if(intervals == null || intervals.length == 0){
            return true;
        }
        
        Comparator<Interval> comparator = new Comparator<Interval>(){
            @Override
            public int compare(Interval i1, Interval i2){
                return i1.start - i2.start;
            }
        };
        
        Arrays.sort(intervals, comparator);
        
        int end = intervals[0].end;
        for(int i = 1; i < intervals.length;i++){
            if(intervals[i].start < end){
                return false;
            }
            end = Math.max(end, intervals[i].end);
        }
        
        return true;
        
    }
}