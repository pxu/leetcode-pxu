17. Letter Combinations of a Phone Number
Given a string containing digits from 2-9 inclusive, return all possible letter combinations that the number could represent.

A mapping of digit to letters (just like on the telephone buttons) is given below. Note that 1 does not map to any letters.



Example:

Input: "23"
Output: ["ad", "ae", "af", "bd", "be", "bf", "cd", "ce", "cf"].
Note:

Although the above answer is in lexicographical order, your answer could be in any order you want.

solution 1: backtrack + map
class Solution {
    Map<Character,List<Character>> map = new HashMap<>();
    public List<String> letterCombinations(String digits) {
        init(map);
        List<String> res = new ArrayList<>();
        if(digits == null || digits.length() == 0){
            return res;
        }
        
        backtrack(res, new StringBuilder(), digits, 0);
        return res;
    }
    
    private void backtrack(List<String> res, StringBuilder sb, String digits, int pos){
        if(pos > digits.length()){
            return;
        }
        
        if(pos == digits.length()){
            res.add(sb.toString());
            return;
        }
        
        char curr = digits.charAt(pos);

        for(char c: map.get(curr)){
            sb.append(c);
            backtrack(res,sb,digits, pos+1);
            sb.deleteCharAt(sb.length()-1);
        }
        
    }
    
    private void init(Map<Character,List<Character>> map){
        map.put('2', Arrays.asList('a','b','c'));
        map.put('3',Arrays.asList('d','e','f'));
        map.put('4',Arrays.asList('g','h','i'));
        map.put('5',Arrays.asList('j','k','l'));
        map.put('6',Arrays.asList('m','n','o'));
        map.put('7',Arrays.asList('p','q','r','s'));
        map.put('8',Arrays.asList('t','u','v'));
        map.put('9',Arrays.asList('w','x','y','z'));
    }
}

solution 2: backtrack + string array
class Solution {
    String keys[] = {"0","1","abc","def","ghi","jkl","mno","pqrs","tuv","wxyz"};
    public List<String> letterCombinations(String digits) {
        List<String> res = new ArrayList<>();
        if(digits == null || digits.length() == 0){
            return res;
        }
        
        backtrack(res, new StringBuilder(), digits, 0);
        return res;
    }
    
    private void backtrack(List<String> res, StringBuilder sb, String digits, int pos){
        if(pos > digits.length()){
            return;
        }
        
        if(pos == digits.length()){
            res.add(sb.toString());
            return;
        }
        
        int index = digits.charAt(pos) - '0';
        
        for(char c: keys[index].toCharArray()){
            sb.append(c);
            backtrack(res,sb,digits, pos+1);
            sb.deleteCharAt(sb.length()-1);
        }
        
    }
    
   
}