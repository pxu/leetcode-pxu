325. Maximum Size Subarray Sum Equals k
Amazon
Given an array nums and a target value k, find the maximum length of a subarray that sums to k. If there isn't one, return 0 instead.

Note:
The sum of the entire nums array is guaranteed to fit within the 32-bit signed integer range.

Example 1:
Given nums = [1, -1, 5, -2, 3], k = 3,
return 4. (because the subarray [1, -1, 5, -2] sums to 3 and is the longest)

Example 2:
Given nums = [-2, -1, 2, 1], k = 1,
return 2. (because the subarray [-1, 2] sums to 1 and is the longest)

Follow Up:
Can you do it in O(n) time?

#solution 1:
Time Complexity: O(n)
Space : O(n)
class Solution {
    public int maxSubArrayLen(int[] nums, int k) {
        if(nums == null || nums.length == 0){
            return 0;
        }
        
        Map<Integer, Integer> map = new HashMap<>();
        int sums[] = new int[nums.length];
        map.put(0,-1);
        int max = 0;
        
        for(int i = 0; i< nums.length; i++){
            if(i == 0){
                sums[0] = nums[i];
            }else{
                sums[i] = sums[i-1] + nums[i]; 
            }
            
            if(!map.containsKey(sums[i])){
                map.put(sums[i], i);
            }
            
            if( map.containsKey(sums[i]-k)){
                int pos = map.get(sums[i]-k);
                max = Math.max(max, i - pos);
            }
        }
        
        return max;
    }
}

#solution 2: reuse nums array

class Solution {
    public int maxSubArrayLen(int[] nums, int k) {
        if(nums == null || nums.length == 0){
            return 0;
        }
        
        Map<Integer, Integer> map = new HashMap<>();
        map.put(0,-1);
        int max = 0;
        
        for(int i = 0; i< nums.length; i++){
            if(i == 0){
                nums[i] = nums[0];
            }else{
                nums[i] = nums[i-1] + nums[i]; 
            }
            
            if(!map.containsKey(nums[i])){
                map.put(nums[i], i);
            }
            
            if( map.containsKey(nums[i]-k)){
                int pos = map.get(nums[i]-k);
                max = Math.max(max, i - pos);
            }
        }
        
        return max;
    }
}