A string S of lowercase letters is given. We want to partition this string into as many parts as possible so that each letter appears in at most one part, and return a list of integers representing the size of these parts.

Example 1:
Input: S = "ababcbacadefegdehijhklij"
Output: [9,7,8]
Explanation:
The partition is "ababcbaca", "defegde", "hijhklij".
This is a partition so that each letter appears in at most one part.
A partition like "ababcbacadefegde", "hijhklij" is incorrect, because it splits S into less parts.
Note:

S will have length in range [1, 500].
S will consist of lowercase letters ('a' to 'z') only.

class Solution {
    public List<Integer> partitionLabels(String S) {
        List<Integer> res = new ArrayList<>();
        if(S == null || S.length() == 0){
            return res;
        }
        
        int hash[] = new int[26];
        Arrays.fill(hash, -1);
        
        for(int i = S.length()-1; i >=0;i--){
            int index = S.charAt(i) - 'a'; 
            
            if(hash[index]< 0){
                hash[index] = i;
            }
        }
        
        int start = 0, end = Integer.MIN_VALUE;
        for(int i = 0;i < S.length(); i++){
            int index = S.charAt(i) - 'a'; 
            end = Math.max(end, hash[index]);
            
            if(end == i){
                res.add(end - start + 1);
                start = end +1;
                
            }
            
        }
        
        return res;
        
    }
}
