Given a string s and a non-empty string p, find all the start indices of p's anagrams in s.

Strings consists of lowercase English letters only and the length of both strings s and p will not be larger than 20,100.

The order of output does not matter.

Example 1:

Input:
s: "cbaebabacd" p: "abc"

Output:
[0, 6]

Explanation:
The substring with start index = 0 is "cba", which is an anagram of "abc".
The substring with start index = 6 is "bac", which is an anagram of "abc".
Example 2:

Input:
s: "abab" p: "ab"

Output:
[0, 1, 2]

Explanation:
The substring with start index = 0 is "ab", which is an anagram of "ab".
The substring with start index = 1 is "ba", which is an anagram of "ab".
The substring with start index = 2 is "ab", which is an anagram of "ab".

solution: sliding window

class Solution {
    public List<Integer> findAnagrams(String s, String p) {
        List<Integer> res = new ArrayList<>();
        if(s.length() < p.length()) return res;
        
        Map<Character,Integer> map = new HashMap<>();
        for(char c: p.toCharArray()){
            map.put(c, map.getOrDefault(c,0)+1);
        }
        
        int l = 0, r = 0, counter = map.size();
        
        while(r < s.length()){
            char cRight = s.charAt(r);
            if(map.containsKey(cRight)){
                map.put(cRight, map.get(cRight) -1);
                if(map.get(cRight) == 0){
                    counter--;
                }
            }
            r++;
            
            while(counter == 0){
                char cLeft = s.charAt(l);
                if(map.containsKey(cLeft)){
                    map.put(cLeft, map.get(cLeft)+1);
                    if(map.get(cLeft) > 0){
                        counter++;
                    }
                }
                
                if(r - l == p.length()){
                    res.add(l);
                }
                l++;
                
            }
            
        }
        return res;
        
    }
}
