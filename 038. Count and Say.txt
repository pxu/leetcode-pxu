The count-and-say sequence is the sequence of integers with the first five terms as following:

1.     1
2.     11
3.     21
4.     1211
5.     111221
1 is read off as "one 1" or 11.
11 is read off as "two 1s" or 21.
21 is read off as "one 2, then one 1" or 1211.
Given an integer n, generate the nth term of the count-and-say sequence.

Note: Each term of the sequence of integers will be represented as a string.

Example 1:

Input: 1
Output: "1"
Example 2:

Input: 4
Output: "1211"

class Solution {
     /**
     * @param n: the nth
     * @return: the nth sequence
     */
    public String countAndSay(int n) {
        // write your code here
        if(n == 0) return "0";
        if(n == 1) return "1";
        String dp[] = new String[n+1];
        dp[1] = "1";
        dp[2] = "11";
        
        for(int i = 3; i < n+1; i++){
            dp[i] = countAndSayHelper(dp[i-1]);
        }
        
        return dp[n];
        
        
    }
    
    public String countAndSayHelper(String val){
        char a[] = val.toCharArray();
        StringBuilder sb = new StringBuilder();
        char prev = a[0];
        int count = 1;
        for(int i = 1; i < val.length(); i++){
            if(a[i] == a[i-1]){
                count++;
            }else{
                sb.append(count).append(prev);
                prev = a[i];
                count= 1;
            }
            
            if(i == val.length() -1){
                sb.append(count).append(prev);
            }
        }
        
        return sb.toString();
    }
}
