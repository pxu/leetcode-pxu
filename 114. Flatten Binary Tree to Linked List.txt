Given a binary tree, flatten it to a linked list in-place.

For example, given the following tree:

    1
   / \
  2   5
 / \   \
3   4   6
The flattened tree should look like:

1
 \
  2
   \
    3
     \
      4
       \
        5
         \
          6

Solution 1: PreOrder
/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) { val = x; }
 * }
 */
class Solution {
    public void flatten(TreeNode root) {
        if(root == null){
            return;
        }
        TreeNode dummy = new TreeNode(-1);
        TreeNode head = dummy;
        Stack<TreeNode> stack = new Stack<>();        
        stack.add(root);
        
        while(!stack.isEmpty()){
            
            TreeNode curr = stack.pop();
            head.right = curr;
            head.left = null;
            head = head.right;
            if(curr.right != null){
                stack.add(curr.right);
            }
            
            if(curr.left != null){
                stack.add(curr.left);
            }
            
        }
    }
}

