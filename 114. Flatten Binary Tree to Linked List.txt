Given a binary tree, flatten it to a linked list in-place.

For example, given the following tree:

    1
   / \
  2   5
 / \   \
3   4   6
The flattened tree should look like:

1
 \
  2
   \
    3
     \
      4
       \
        5
         \
          6

Solution 1: PreOrder
/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) { val = x; }
 * }
 */
class Solution {
    public void flatten(TreeNode root) {
        if(root == null){
            return;
        }
        TreeNode dummy = new TreeNode(-1);
        TreeNode head = dummy;
        Stack<TreeNode> stack = new Stack<>();        
        stack.add(root);
        
        while(!stack.isEmpty()){
            
            TreeNode curr = stack.pop();
            head.right = curr;
            head.left = null;
            head = head.right;
            if(curr.right != null){
                stack.add(curr.right);
            }
            
            if(curr.left != null){
                stack.add(curr.left);
            }
            
        }
    }
}

/**
 * Definition of TreeNode:
 * public class TreeNode {
 *     public int val;
 *     public TreeNode left, right;
 *     public TreeNode(int val) {
 *         this.val = val;
 *         this.left = this.right = null;
 *     }
 * }
 */

solution 2:Go down through the left, when right is not null, push right to stack.
public class Solution {
    /**
     * @param root: a TreeNode, the root of the binary tree
     * @return: nothing
     */
    public void flatten(TreeNode root) {
        // write your code here
        if(root == null){
            return;
        }
        
        Stack<TreeNode> stack = new Stack<>();
        TreeNode curr = root;
        
        while(!stack.isEmpty() || curr != null){
            if(curr.right != null){
                stack.push(curr.right);
            }
            
            if(curr.left != null){
                curr.right = curr.left;
                curr.left = null;
            }else if(!stack.isEmpty()){
                TreeNode temp = stack.pop();
                curr.right = temp;
            }
           
           curr = curr.right;
        }
        
    }
    
    
}
