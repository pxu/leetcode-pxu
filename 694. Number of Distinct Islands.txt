Problem:

 Given a non-empty 2D array grid of 0’s and 1’s, an island is a group of 1’s (representing land) connected 4-directionally (horizontal or vertical.) You may assume all four edges of the grid are surrounded by water.
 Count the number of distinct islands. An island is considered to be the same as another if and only if one island can be translated (and not rotated or reflected) to equal the other.

Example 1:

 11000 
   11000 
   00011 
   00011
 Given the above grid map, return 1.

Example 2:

 11011 
   10000 
   00001 
   11011
 Given the above grid map, return 3.
 Notice that: 
   1 1 
   1 
   and 
   1 
   1 1  
   are considered different island shapes, because we do not consider reflection / rotation.

Note:

 The length of each dimension in the given grid does not exceed 50.

class Solution {
    Set<String> shapes = new HashSet<>();
    public int numDistinctIslands(int[][] grid) {
        
        if(grid == null || grid.length == 0 || grid[0].length == 0){
            return 0;
        }
        
        int rows = grid.length;
        int cols = grid[0].length;
        
        for(int r = 0; r < rows; r++){
            for(int c = 0; c < cols; c++){
               StringBuilder sb = new StringBuilder();
               dfs(grid,r,c,rows,cols, 'o',sb); 
               if(sb.length() >0){
                shapes.add(sb.toString());
               }
            }
        }
        
        return shapes.size();
        
    }
    
    private void dfs(int[][] grid, int row, int col, int rows, int cols, char di, StringBuilder sb){
        if(row < 0 || row >= rows || col < 0 || col >= cols || grid[row][col] <= 0){
            return;
        }
        
        sb.append(di);
        grid[row][col] = -1;
        dfs(grid,row-1,col,rows,cols,'u', sb);
        dfs(grid,row+1,col,rows,cols,'d', sb);
        dfs(grid,row,col-1,rows,cols,'l',sb);
        dfs(grid,row,col+1,rows,cols,'r',sb);
        sb.append('b');

        
        
    }
}
