Given a set of distinct integers, nums, return all possible subsets (the power set).

Note: The solution set must not contain duplicate subsets.

Example:

Input: nums = [1,2,3]
Output:
[
  [3],
  [1],
  [2],
  [1,2,3],
  [1,3],
  [2,3],
  [1,2],
  []
]

solution: backtrack
class Solution {
    public List<List<Integer>> subsets(int[] nums) {
        List<List<Integer>> res = new ArrayList<>();
        if(nums == null || nums.length == 0){
            return res;
        }
        
        backtrack(res, nums, new ArrayList<Integer>(),0);
        return res;
    }
    
    private void backtrack(List<List<Integer>> res, int[] nums, List<Integer> currList, int start){
         res.add(new ArrayList<Integer>(currList));
        
         if(start == nums.length){
            return;
        }
        
        for(int i = start; i < nums.length; i++){
            currList.add(nums[i]);
            backtrack(res, nums, currList,i+1);
            currList.remove(currList.size()-1);
        }
        
    }
}
