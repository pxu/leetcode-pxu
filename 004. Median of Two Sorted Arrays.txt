There are two sorted arrays nums1 and nums2 of size m and n respectively.

Find the median of the two sorted arrays. The overall run time complexity should be O(log (m+n)).

Example 1:
nums1 = [1, 3]
nums2 = [2]

The median is 2.0
Example 2:
nums1 = [1, 2]
nums2 = [3, 4]

The median is (2 + 3)/2 = 2.5

public class Solution {
    /*
     * @param A: An integer array
     * @param B: An integer array
     * @return: a double whose format is *.5 or *.0
     */
    public double findMedianSortedArrays(int[] A, int[] B) {
        // write your code here
        int lenA = A.length;
        int lenB = B.length;
        
        int median1 = (lenA + lenB + 1)/2;
        int median2 = (lenA + lenB + 2)/2;
        
        return (findKth(A, B, 0,0,median1) + findKth(A,B, 0,0, median2))/2.0;
    
    }
    
    //https://leetcode.com/problems/median-of-two-sorted-arrays/discuss/2471/very-concise-ologminmn-iterative-solution-with-detailed-explanation
    public int findKth(int[] A, int[] B, int startA, int startB, int k){
        if(startA ==A.length){
            return B[startB+k-1];
        }
        
        if(startB == B.length ){
            return A[startA+ k-1];
        }
        
        if(k == 1){
            return Math.min(A[startA], B[startB]);
        }
        /**
        那么如何判断两个有序数组A,B中第k大的数呢？
        我们需要判断A[k/2-1]和B[k/2-1]的大小。
        如果A[k/2-1]==B[k/2-1]，那么这个数就是两个数组中第k大的数。
        如果A[k/2-1]<B[k/2-1], 那么说明A[0]到A[k/2-1]都不可能是第k大的数，所以需要舍弃这一半，继续从A[k/2]到A[A.length-1]继续找。当然，因为这里舍弃了A[0]到A[k/2-1]这k/2个数，那么第k大也就变成了，第k-k/2个大的数了。
        如果 A[k/2-1]>B[k/2-1]，就做之前对称的操作就好。
         这样整个问题就迎刃而解了。

        当然，边界条件页不能少，需要判断是否有一个数组长度为0，以及k==1时候的情况。

        因为除法是向下取整，并且页为了方便起见，对每个数组的分半操作采取：

        int partA = Math.min(k/2,m);
        int partB = k - partA; 

         为了能保证上面的分半操作正确，需要保证A数组的长度小于B数组的长度。
        **/
        
        int aMid = Integer.MAX_VALUE;
        int bMid = Integer.MAX_VALUE;
        
        if(startA + k/2 -1 < A.length){
            aMid = A[startA + k/2-1];
        }
        
        if(startB + k/2 -1 < B.length){
            bMid = B[startB + k/2 -1];
        }
        
        if(aMid < bMid){
            return findKth(A, B, startA+k/2, startB, k-k/2);/**
        那么如何判断两个有序数组A,B中第k大的数呢？
        我们需要判断A[k/2-1]和B[k/2-1]的大小。
        如果A[k/2-1]==B[k/2-1]，那么这个数就是两个数组中第k大的数。
        如果A[k/2-1]<B[k/2-1], 那么说明A[0]到A[k/2-1]都不可能是第k大的数，所以需要舍弃这一半，继续从A[k/2]到A[A.length-1]继续找。当然，因为这里舍弃了A[0]到A[k/2-1]这k/2个数，那么第k大也就变成了，第k-k/2个大的数了。
        如果 A[k/2-1]>B[k/2-1]，就做之前对称的操作就好。
         这样整个问题就迎刃而解了。

        当然，边界条件页不能少，需要判断是否有一个数组长度为0，以及k==1时候的情况。

        因为除法是向下取整，并且页为了方便起见，对每个数组的分半操作采取：

        int partA = Math.min(k/2,m);
        int partB = k - partA; 

         为了能保证上面的分半操作正确，需要保证A数组的长度小于B数组的长度。
        **/
        }else{
            return findKth(A,B,startA, startB+k/2, k-k/2);
        }
        
        
    }
}
