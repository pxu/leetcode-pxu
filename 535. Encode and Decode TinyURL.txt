Note: This is a companion problem to the System Design problem: Design TinyURL.
TinyURL is a URL shortening service where you enter a URL such as https://leetcode.com/problems/design-tinyurl and it returns a short URL such as http://tinyurl.com/4e9iAk.

Design the encode and decode methods for the TinyURL service. There is no restriction on how your encode/decode algorithm should work. You just need to ensure that a URL can be encoded to a tiny URL and the tiny URL can be decoded to the original URL.

public class Codec {

    Map<String,String> urlMap = new HashMap<>();
    List<Character> charList = new ArrayList<>();
    private final static int SIZE = 6;
    // Encodes a URL to a shortened URL.
    public String encode(String longUrl) {
        addToList('a','z');
        addToList('0','9');
        addToList('A','Z');
        
        String res = "";
        do{
            res = getRandom();
        }
        while(urlMap.containsKey(res));
        urlMap.put(res, longUrl);
        return res;
    }

    // Decodes a shortened URL to its original URL.
    public String decode(String shortUrl) {
        return urlMap.get(shortUrl);
    }
    
    private String getRandom(){
        StringBuffer sb = new StringBuffer(); 
        Random random = new Random();
        while(sb.length() < SIZE){
            int randomPos = random.nextInt(charList.size());
            sb.append(charList.get(randomPos));
        }
        
        return sb.toString();
    }
    
    private void addToList(char start, char end){
        for(char c=start; c<=end; c++){
            charList.add(c);
        }
        
    }
}

// Your Codec object will be instantiated and called as such:
// Codec codec = new Codec();
// codec.decode(codec.encode(url));
