33. Search in Rotated Sorted Array
Suppose an array sorted in ascending order is rotated at some pivot unknown to you beforehand.

(i.e., [0,1,2,4,5,6,7] might become [4,5,6,7,0,1,2]).

You are given a target value to search. If found in the array return its index, otherwise return -1.

You may assume no duplicate exists in the array.

Your algorithm's runtime complexity must be in the order of O(log n).

Example 1:

Input: nums = [4,5,6,7,0,1,2], target = 0
Output: 4
Example 2:

Input: nums = [4,5,6,7,0,1,2], target = 3
Output: -1

solution 1: version 1
class Solution {
    public int search(int[] nums, int target) {
        if(nums == null || nums.length == 0) return -1;
        int l = 0, r = nums.length-1;
        
        while(l + 1 < r){
            int m = l + (r -l)/2;
            
            if(nums[m] >= nums[l]){
                if(target >= nums[l] && target <= nums[m]){
                    r = m;
                }else{
                    l = m;
                }
            }else{
                if(target >= nums[m] && target <= nums[r]){
                    l = m;
                }else{
                    r = m;
                }
            }
        }
        
        
        return target == nums[l]? l: target == nums[r]? r: -1;
               
    }
}

solution 1: version 2

class Solution {
    public int search(int[] arr, int key) {
        
    if(arr == null || arr.length == 0){
      return -1;
    }
    
    int left = 0, right = arr.length  -1;
    while(left <= right){
      int mid = left + (right - left)/2;
      int midVal = arr[mid];
      if(midVal == key){
        return mid;
      }
      
      if(midVal >= arr[left]){
        if(key >= arr[left] && key < midVal){
          right = mid -1;
        }else{
          left = mid + 1;
        }
      }else if(midVal <= arr[right]){
        if(key > midVal && key <= arr[right]){
          left = mid + 1;
        }else{
          right = mid -1;
        }
      
      }
    } 
    return -1;
    }
    
   
}
