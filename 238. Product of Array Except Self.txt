238. Product of Array Except Self
Given an array nums of n integers where n > 1,  return an array output such that output[i] is equal to the product of all the elements of nums except nums[i].

Example:

Input:  [1,2,3,4]
Output: [24,12,8,6]
Note: Please solve it without division and in O(n).

Follow up:
Could you solve it with constant space complexity? (The output array does not count as extra space for the purpose of space complexity analysis.)

#solutin 1: space complexity O(n)
class Solution {
    public int[] productExceptSelf(int[] nums) {
        if(nums == null){
            return null;
        }
        
        int res[] = new int[nums.length]; 
        int leftSides[] = new int[nums.length];
        int rightSides[] = new int[nums.length];
        Arrays.fill(leftSides, 1);
        Arrays.fill(rightSides, 1);
        
        for(int i = 0; i < nums.length; i++){
            if(i == 0){
                leftSides[i] = nums[i];
            }else{
                leftSides[i] = leftSides[i-1] * nums[i];
            }
        }
        
        for(int i = nums.length -1; i >=0; i--){
            if(i == nums.length -1){
                rightSides[i] = nums[i];
            }else{
                rightSides[i] = rightSides[i+1] * nums[i];
            }
        }
        
        for(int i = 0; i < nums.length; i++){
            if(i == 0){
                res[i] = rightSides[i+1];
            }else if(i == nums.length -1){
                res[i] = leftSides[i-1];
            }else{
                res[i] = leftSides[i-1] * rightSides[i+1];
            }
        }
        
        return res;
        
        
    }
}

#solution 2, Space Complexity O(1)
class Solution {
    public int[] productExceptSelf(int[] nums) {
        if(nums == null){
            return null;
        }
        
        int res[] = new int[nums.length]; 
        Arrays.fill(res, 1);
        
        int leftSides = 1;
        int rightSides = 1;
        
        for(int i = 1; i < nums.length; i++){
            res[i] = leftSides * nums[i-1];
            leftSides = res[i];
        }
        
        for(int i = nums.length -2; i >=0; i--){
            res[i] *= rightSides * nums[i+1];
            rightSides = rightSides * nums[i+1];
        }
        
        return res;
        
        
    }
}