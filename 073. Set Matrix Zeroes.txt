Given a m x n matrix, if an element is 0, set its entire row and column to 0. Do it in-place.

Example 1:

Input: 
[
  [1,1,1],
  [1,0,1],
  [1,1,1]
]
Output: 
[
  [1,0,1],
  [0,0,0],
  [1,0,1]
]
Example 2:

Input: 
[
  [0,1,2,0],
  [3,4,5,2],
  [1,3,1,5]
]
Output: 
[
  [0,0,0,0],
  [0,4,5,0],
  [0,3,1,0]
]
Follow up:

A straight forward solution using O(mn) space is probably a bad idea.
A simple improvement uses O(m + n) space, but still not the best solution.
Could you devise a constant space solution?
solution 1: O(M+N)
class Solution {
    public void setZeroes(int[][] matrix) {
        if(matrix == null || matrix.length == 0 || matrix[0].length == 0) return;
        List<Integer> zeroRows = new ArrayList<>();
        List<Integer> zeroCols = new ArrayList<>();
        int rows = matrix.length;
        int cols = matrix[0].length;
        for(int row = 0; row < rows; row++){
            for(int col = 0; col < cols; col++){
                if(matrix[row][col] == 0){
                    zeroRows.add(row);
                    zeroCols.add(col);
                }
            }
        }
        
        for(int row: zeroRows){
            Arrays.fill(matrix[row],0);
        }
        
        for(int col: zeroCols){
            for(int row = 0; row < rows; row++){
                matrix[row][col] = 0;
            }
        }
        
    }
}

solution 2: O(0):
class Solution {
    public void setZeroes(int[][] matrix) {
        if(matrix == null || matrix.length == 0 || matrix[0].length == 0) return;
        List<Integer> zeroRows = new ArrayList<>();
        List<Integer> zeroCols = new ArrayList<>();
        int rows = matrix.length;
        int cols = matrix[0].length;
        boolean firstItemZero = matrix[0][0] == 0? true: false;
        boolean firstRowZero = false;
        boolean firstColZero = false;
        
        if(matrix[0][0] == 0){
            firstRowZero = true;
            firstColZero = true;
        }
        
        for(int row = 0; row < rows; row++){
            for(int col = 0; col < cols; col++){
                if(matrix[row][col] == 0){
                   matrix[0][col] = 0;
                   matrix[row][0] = 0; 
                   if(row == 0) firstRowZero = true;
                   if(col == 0) firstColZero = true; 
                }
            }
        }
        
        for(int col = 1; col < cols; col++){
            int val = matrix[0][col];
            if(val == 0){
                for(int row = 1; row < rows; row++){
                    matrix[row][col] = 0;
                }
            }
              
        }
        
        for(int row = 1; row < rows; row++){
            int val = matrix[row][0];
            if(val == 0){
              Arrays.fill(matrix[row],0);
            }
        }
        
        if(firstRowZero){
             Arrays.fill(matrix[0],0);
        }
        
        if(firstColZero){
            for(int row = 0; row < rows; row++){
                matrix[row][0] = 0;
            }
        }
        
    }
}
