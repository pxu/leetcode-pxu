Given a linked list, determine if it has a cycle in it.

Follow up:
Can you solve it without using extra space?

/**
 * Definition for singly-linked list.
 * class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode(int x) {
 *         val = x;
 *         next = null;
 *     }
 * }
 */
public class Solution {
    public boolean hasCycle(ListNode head) {
        if(head == null) return false;
        
        ListNode slow = head.next , fast = head.next != null? head.next.next:null;
        
        while(slow != null && fast != null){
            if(slow == fast) return true;
            slow = slow.next;
            fast = fast.next != null? fast.next.next: null;
        }
        
        return false;
        
    }
}
