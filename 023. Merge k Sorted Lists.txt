Merge k Sorted Lists
Merge k sorted linked lists and return it as one sorted list. Analyze and describe its complexity.

Example:

Input:
[
  1->4->5,
  1->3->4,
  2->6
]
Output: 1->1->2->3->4->4->5->6

solution 1: priorityqueue
time complexity: O(nklgk)
space complexity: O(k)
/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode(int x) { val = x; }
 * }
 */
class Solution {
    public ListNode mergeKLists(ListNode[] lists) {
        if(lists == null || lists.length == 0){
            return null;
        }
        ListNode dummy = new ListNode(-1);
        ListNode head = dummy;
        Comparator<ListNode> comparator = new Comparator<ListNode>(){
            @Override
            public int compare(ListNode l1, ListNode l2){
                return l1.val - l2.val;
            }
        };
        PriorityQueue<ListNode> pq = new PriorityQueue<>(comparator);
        
        for(ListNode node: lists){
            if(node !=null){
                pq.add(node);
            }
        }
        
        while(!pq.isEmpty()){
            ListNode curr = pq.remove();
            head.next = new ListNode(curr.val);
            head = head.next;
            if(curr.next != null){
                pq.add(curr.next);
            }
        }
        
        
        return dummy.next;
    }
}

#solution 2: merge list
time O(nklgk)
space O(1)
/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode(int x) { val = x; }
 * }
 */
class Solution {
    public ListNode mergeKLists(ListNode[] lists) {
        if(lists == null || lists.length == 0){
            return null;
        }
        
        int left = 0;
        int right = lists.length -1;
        while(right > 0){
            left = 0;
            while(left < right){
                lists[left] = mergeList(lists[left], lists[right]);
                left++;
                right--;
            }
            
        }
        
        return lists[0];
        
    }
    
    private ListNode mergeList(ListNode l1, ListNode l2){
        ListNode dummyNode = new ListNode(-1);
        ListNode head= dummyNode;
        
        while(l1 != null && l2 != null){
            if(l1.val > l2.val){
                head.next = new ListNode(l2.val);
                l2 = l2.next;
            }else{
                head.next = new ListNode(l1.val);
                l1 = l1.next;
            }
            head = head.next;
        }
        
        if(l1 != null){
            head.next = l1;
        }
        
        if(l2 != null){
            head.next = l2;
        }
        
        return dummyNode.next;
        
    }
}
