Given two strings s1 and s2, write a function to return true if s2 contains the permutation of s1. In other words, one of the first string's permutations is the substring of the second string.
Example 1:
Input:s1 = "ab" s2 = "eidbaooo"
Output:True
Explanation: s2 contains one permutation of s1 ("ba").
Example 2:
Input:s1= "ab" s2 = "eidboaoo"
Output: False
Note:
The input strings only contain lower case letters.
The length of both given strings is in range [1, 10,000].

solution 1: sliding window
class Solution {
    public boolean checkInclusion(String s1, String s2) {
        if(s1 == null || s1.length() == 0) return true;
        if(s2 == null || s2.length() == 0 || s1.length() > s2.length()) return false;
        
        Map<Character,Integer> map = new HashMap<>();
        int count = 0;
        for(char c: s1.toCharArray()){
            map.put(c, map.getOrDefault(c,0)+1);
        }
        count = map.size();
        char chars[] = s2.toCharArray();
        int l = 0, r = 0;
        while(r < s2.length()){

            char cr = chars[r];
            if(map.containsKey(cr)){
                map.put(cr, map.get(cr)-1);
                if(map.get(cr) == 0){
                    count--;
                }
            }
            r++;
            
            while(count == 0){
                char cl = chars[l];
                
                if(map.containsKey(cl)){
                    map.put(cl, map.get(cl)+1);
                    if(map.get(cl) > 0){
                        count++;
                    }
                }
                
                if(r-l == s1.length()){
                    return true;
                }
                l++;
            }
        }
        
        return false;
    }
}

solution 2: hash map
class Solution {
    public boolean checkInclusion(String s1, String s2) {
        int len1 = s1.length();
        int len2 = s2.length();
        
        if(len1 > len2){
            return false;
        }
        
        Map<Character, Integer> map1 = new HashMap<>();
        Map<Character, Integer> map2 = new HashMap<>();
        
        for(char c: s1.toCharArray()){
            map1.put(c, map1.getOrDefault(c, 0) + 1);
        }
        
        for(int i = 0; i < len2; i++){
            if(i - len1 >= 0){
                int newCount = map2.get(s2.charAt(i- len1)) - 1;
                if(newCount == 0){
                    map2.remove(s2.charAt(i-len1));
                }else{
                    map2.put(s2.charAt(i-len1), newCount);
                }
            }
            
            map2.put(s2.charAt(i), map2.getOrDefault(s2.charAt(i),0) +1);
            if(map2.equals(map1)){
                return true;
            }
        }
        
        return false;
    }
}
