Given inorder and postorder traversal of a tree, construct the binary tree.

Note:
You may assume that duplicates do not exist in the tree.

For example, given

inorder = [9,3,15,20,7]
postorder = [9,15,7,20,3]
Return the following binary tree:

    3
   / \
  9  20
    /  \
   15   7
 
 /**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) { val = x; }
 * }
 */
class Solution {
    public TreeNode buildTree(int[] inorder, int[] postorder) {
        
       if(postorder == null || postorder.length == 0 || inorder == null || inorder.length == 0) return null;
        
        return buildTreeHelper(postorder, inorder,  0, postorder.length-1, postorder.length-1);
    }
    
    public TreeNode buildTreeHelper(int[] postorder, int[] inorder, int start, int end, int postend){
        if(start > end) return null;
        TreeNode root = new TreeNode(postorder[postend]);
        int mid = findNode(root.val, inorder, start, end);
        int leftTreeSize = mid - start;
        int rightTreeSize = end - mid;
        root.right = buildTreeHelper(postorder,inorder, mid+1, end, postend-1 );
        root.left = buildTreeHelper(postorder, inorder, start, mid-1, postend - rightTreeSize -1 );

        return root;
        
    }
    
    private int findNode(int val, int[] inorder, int start, int end){
        for(int i = start; i <= end ; i++){
            if(val == inorder[i]){
                return i;
            }
        }
        return -1;
        
    }
}
