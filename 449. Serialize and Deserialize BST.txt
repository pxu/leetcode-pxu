Serialization is the process of converting a data structure or object into a sequence of bits so that it can be stored in a file or memory buffer, or transmitted across a network connection link to be reconstructed later in the same or another computer environment.

Design an algorithm to serialize and deserialize a binary search tree. There is no restriction on how your serialization/deserialization algorithm should work. You just need to ensure that a binary search tree can be serialized to a string and this string can be deserialized to the original tree structure.

The encoded string should be as compact as possible.

Note: Do not use class member/global/static variables to store states. Your serialize and deserialize algorithms should be stateless.

/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) { val = x; }
 * }
 */
public class Codec {
    private final static char SP=',';
    private final static char EMPTY='#';
    // Encodes a tree to a single string.
    public String serialize(TreeNode root) {
        StringBuilder sb= new StringBuilder();
        if(root == null) return "";
        Stack<TreeNode> stack = new Stack<>();
        stack.push(root);
        while(!stack.isEmpty()){
            TreeNode curr = stack.pop();
            if(curr == null){
                sb.append(EMPTY);
            }else{
                sb.append(curr.val);

                stack.push(curr.right);
                stack.push(curr.left);
            }
            
            sb.append(SP);
        }
        
        sb.deleteCharAt(sb.length()-1);
        return sb.toString();
    }

    // Decodes your encoded data to tree.
    public TreeNode deserialize(String data) {
        if(data == null || data.length() == 0) return null;
        String array[] = data.split("\\" + SP);
        Queue<String> queue = new LinkedList<>();
        for(String val: array){
            queue.add(val);
        }
        
        return deserializeHelper(queue);
    }
    
    public TreeNode deserializeHelper(Queue<String> queue){
        if(queue.isEmpty()) return null;
        String valStr = queue.remove();
        if(valStr.equals("" + EMPTY)) return null;
        int val = Integer.valueOf(valStr);
        TreeNode root = new TreeNode(val);
        root.left = deserializeHelper(queue);
        root.right = deserializeHelper(queue);
        
        return root;
        
    }
}

// Your Codec object will be instantiated and called as such:
// Codec codec = new Codec();
// codec.deserialize(codec.serialize(root));
