Suppose an array sorted in ascending order is rotated at some pivot unknown to you beforehand.

(i.e.,  [0,1,2,4,5,6,7] might become  [4,5,6,7,0,1,2]).

Find the minimum element.

You may assume no duplicate exists in the array.

Example 1:

Input: [3,4,5,1,2] 
Output: 1
Example 2:

Input: [4,5,6,7,0,1,2]
Output: 0

class Solution {
    public int findMin(int[] nums) {
        if(nums == null || nums.length == 0){
            return 0;
        }
        
        return findMin(nums, 0, nums.length -1);
        
    }
    
    public int findMin(int[] nums, int start, int end){
        if(start > end){
            return Integer.MAX_VALUE;
        }
        
        int mid = start + (end - start)/2;
        
        if(nums[mid] >= nums[start]){
            if(nums[start] > nums[end]){
                return findMin(nums, mid+1, end);
            }else{
                return nums[start];
            }
        }
        
        if(nums[mid] <= nums[end]){
            if(nums[end] < nums[start]){
                return findMin(nums, start, mid);
            }else{
                return nums[start];
            }
        }
        
        return Integer.MAX_VALUE;
    }
}