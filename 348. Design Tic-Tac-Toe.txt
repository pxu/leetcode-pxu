Design a Tic-tac-toe game that is played between two players on a n x n grid.

You may assume the following rules:

A move is guaranteed to be valid and is placed on an empty block.
Once a winning condition is reached, no more moves is allowed.
A player who succeeds in placing n of their marks in a horizontal, vertical, or diagonal row wins the game.
Example:
Given n = 3, assume that player 1 is "X" and player 2 is "O" in the board.

TicTacToe toe = new TicTacToe(3);

toe.move(0, 0, 1); -> Returns 0 (no one wins)
|X| | |
| | | | // Player 1 makes a move at (0, 0).
| | | |

toe.move(0, 2, 2); -> Returns 0 (no one wins)
|X| |O|
| | | | // Player 2 makes a move at (0, 2).
| | | |

toe.move(2, 2, 1); -> Returns 0 (no one wins)
|X| |O|
| | | | // Player 1 makes a move at (2, 2).
| | |X|

toe.move(1, 1, 2); -> Returns 0 (no one wins)
|X| |O|
| |O| | // Player 2 makes a move at (1, 1).
| | |X|

toe.move(2, 0, 1); -> Returns 0 (no one wins)
|X| |O|
| |O| | // Player 1 makes a move at (2, 0).
|X| |X|

toe.move(1, 0, 2); -> Returns 0 (no one wins)
|X| |O|
|O|O| | // Player 2 makes a move at (1, 0).
|X| |X|

toe.move(2, 1, 1); -> Returns 1 (player 1 wins)
|X| |O|
|O|O| | // Player 1 makes a move at (2, 1).
|X|X|X|
Follow up:
Could you do better than O(n2) per move() operation?

Hint:

Could you trade extra space such that move() operation can be done in O(1)?
You need two arrays: int rows[n], int cols[n], plus two variables: diagonal, anti_diagonal.

class TicTacToe {
    int rows[], cols[], diagonals, antiDiagonals;
    int size;
    /** Initialize your data structure here. */
    public TicTacToe(int n) {
        size = n;
        rows = new int[n];
        cols = new int[n];
    }
    
    /** Player {player} makes a move at ({row}, {col}).
        @param row The row of the board.
        @param col The column of the board.
        @param player The player, can be either 1 or 2.
        @return The current winning condition, can be either:
                0: No one wins.
                1: Player 1 wins.
                2: Player 2 wins. */
    public int move(int row, int col, int player) {
        int toAdd = player == 1? 1: -1;
        
        rows[row] +=toAdd;
        cols[col] +=toAdd;
        
        if(row == col){
            diagonals += toAdd;
        }
        
        if(row == (size - col - 1)){
            antiDiagonals += toAdd;
        }
        
        if(Math.abs(rows[row]) == size || Math.abs(cols[col]) == size || Math.abs(diagonals) == size || Math.abs(antiDiagonals) == size){
            return player;
        }
        
        return 0;
    }
}

/**
 * Your TicTacToe object will be instantiated and called as such:
 * TicTacToe obj = new TicTacToe(n);
 * int param_1 = obj.move(row,col,player);
 */
 
 solution 2:
 class TicTacToe {
    int[][] board;
    int size;
    Player players[];

    class Player{
        int id;
        int[][] pos;
        public Player(int id, int n){
            this.id = id;
            pos = new int[n][n];
        }
        
        public boolean hasWon(){
            boolean won = true;
            for(int row = 0; row < size;row++){
                won = true;
                for( int col = 0; col < size; col++){
                    if(pos[row][col] == 0){
                        won = false;
                        break;
                    }
                }
                if(won == true){
                    return true;
                }
            }
            
            for(int col = 0; col < size;col++){
                won = true;
                for(int row = 0; row < size; row++){
                    if(pos[row][col] == 0){
                        won = false;
                        break;
                    }
                }
                if(won == true){
                    return true;
                }
            }
            
            
            won = true;
            for(int row = 0, col = row;row<size && col<size;row++,col++){
                if(pos[row][col] == 0){
                        won = false;
                        break;
                }
            }
            
            if(won == true){
                    return true;
            }
            
            won = true;
            for(int row = size-1, col = 0; row>=0 && col<size; row--,col++){
                if(pos[row][col] == 0){
                        won = false;
                        break;
                }
            }
            
             if(won == true){
                    return true;
            }
            return false;
        }
        
    }
    
    
    /** Initialize your data structure here. */
    public TicTacToe(int n) {
        this.board = new int[n][n];
        this.size = n;
        this.players = new Player[2];
        this.players[0] = new Player(1,n);
        this.players[1] = new Player(2,n);
    }
    
    /** Player {player} makes a move at ({row}, {col}).
        @param row The row of the board.
        @param col The column of the board.
        @param player The player, can be either 1 or 2.
        @return The current winning condition, can be either:
                0: No one wins.
                1: Player 1 wins.
                2: Player 2 wins. */
    public int move(int row, int col, int player) {
        if(board[row][col] == 1){
            return 0;
        }else{
            Player curr = players[player-1];
            curr.pos[row][col] = 1;
            if(curr.hasWon()){
                return player;
            }else{
                return 0;
            }
            
        }
    }
    
   
}

/**
 * Your TicTacToe object will be instantiated and called as such:
 * TicTacToe obj = new TicTacToe(n);
 * int param_1 = obj.move(row,col,player);
 */
