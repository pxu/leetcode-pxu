Given an array, rotate the array to the right by k steps, where k is non-negative.

Example 1:

Input: [1,2,3,4,5,6,7] and k = 3
Output: [5,6,7,1,2,3,4]
Explanation:
rotate 1 steps to the right: [7,1,2,3,4,5,6]
rotate 2 steps to the right: [6,7,1,2,3,4,5]
rotate 3 steps to the right: [5,6,7,1,2,3,4]
Example 2:

Input: [-1,-100,3,99] and k = 2
Output: [3,99,-1,-100]
Explanation: 
rotate 1 steps to the right: [99,-1,-100,3]
rotate 2 steps to the right: [3,99,-1,-100]
Note:

Try to come up as many solutions as you can, there are at least 3 different ways to solve this problem.
Could you do it in-place with O(1) extra space?

solution 1: new nums
class Solution {
    public void rotate(int[] nums, int k) {
        if( nums == null || nums.length <= 1) return;
        int len = nums.length;
        int K = k%len;
        
        int newNums[] = new int[len];
        int index = 0;
        for(int i = (len-K);i <len; i++){
             newNums[index++] = nums[i];
        }
        
        for(int i = 0; i < (len-K); i++){
            newNums[index++] = nums[i];
        }
        
        for(int i = 0; i < len; i++){
            nums[i] = newNums[i];
        }
        
    }
}

solution 2: reverse
class Solution {
    public void rotate(int[] nums, int k) {
        if(nums == null || nums.length < 2) return;
        int len = nums.length;
        int K= k%len;
        helper(nums, 0, len - K -1);
        helper(nums, len-K, len-1);
        helper(nums, 0, len-1);
    }
    
    private void helper(int[] nums, int low, int high){
        while(low < high){
            int temp = nums[low];
            nums[low++] = nums[high];
            nums[high--] = temp;
        }
    }
}
