Given a non-empty array of integers, return the k most frequent elements.

For example,
Given [1,1,1,2,2,3] and k = 2, return [1,2].

Note: 
You may assume k is always valid, 1 ≤ k ≤ number of unique elements.
Your algorithm's time complexity must be better than O(n log n), where n is the array's size.

idea:
use two hashmaps and get the max and min count to solve it.

class Solution {
    public List<Integer> topKFrequent(int[] nums, int k) {
        List<Integer> res = new ArrayList<>();
        if(nums == null || nums.length == 0){
            return res;
        }
        
        Map<Integer,Integer> map = new HashMap<>();
        
        for(int num: nums){
            if(!map.containsKey(num)){
                map.put(num,1);    
            }else{
                map.put(num,map.get(num)+1);
            }
        }
        
        Integer min= Integer.MAX_VALUE, max = Integer.MIN_VALUE;
        for(Map.Entry<Integer,Integer> entry: map.entrySet()){
            min = Math.min(min,entry.getValue());
            max = Math.max(max, entry.getValue());
        }
        
        Map<Integer,List<Integer>> bucket = new HashMap<>();
        
        for(Map.Entry<Integer,Integer> entry: map.entrySet()){
            int num = entry.getKey();
            int times = entry.getValue();
            if(!bucket.containsKey(times)){
                bucket.put(times, new ArrayList<Integer>());
            }
            bucket.get(times).add(num);
        }
        
        for(int i = max; i>=min;i--){
            List<Integer> numList = bucket.get(i);
            if(numList == null){
                continue;
            }
            for(Integer num: numList){
                if(res.size() <k){
                    res.add(num);
                }
            }
        }
    
        return res;
    }
}
