Inorder Successor in BST
Given a binary search tree and a node in it, find the in-order successor of that node in the BST.

Note: If the given node has no in-order successor in the tree, return null.

Example 1:

Input: root = [2,1,3], p = 1

  2
 / \
1   3

Output: 2
Example 2:

Input: root = [5,3,6,2,4,null,null,1], p = 6

      5
     / \
    3   6
   / \
  2   4
 /   
1

Output: null

solution 1: iteration
/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) { val = x; }
 * }
 */
class Solution {
    public TreeNode inorderSuccessor(TreeNode root, TreeNode p) {
        if(root == null || p== null){
            return null;
        }
        
        boolean isNextNodeSuccessor = false;
        TreeNode curr = root;
        Stack<TreeNode> stack = new Stack<>();
        
        
        while(!stack.isEmpty() || curr != null){
            
            while(curr != null){
                stack.push(curr);
                curr = curr.left;
            }
            
            curr = stack.pop();
            if(isNextNodeSuccessor){
                return curr;
            }
            
            if(curr == p){
                isNextNodeSuccessor = true;
            }
            
            curr = curr.right;
        }
        
        return null;
        
    }
}

solution 2: improved version
/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) { val = x; }
 * }
 */
class Solution {

    public TreeNode inorderSuccessor(TreeNode root, TreeNode p){
        if(root == null || p == null){
            return null;
        }
        
        TreeNode res = null;
        
        while(root != null){
            if(root.val > p.val){
                res = root;
                root = root.left;
            }else{
                root = root.right;
            }
            
        }
        
        return res;
    }

    
}