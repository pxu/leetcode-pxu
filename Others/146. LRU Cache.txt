Design and implement a data structure for Least Recently Used (LRU) cache. It should support the following operations: get and put.

get(key) - Get the value (will always be positive) of the key if the key exists in the cache, otherwise return -1.
put(key, value) - Set or insert the value if the key is not already present. When the cache reached its capacity, it should invalidate the least recently used item before inserting a new item.

Follow up:
Could you do both operations in O(1) time complexity?

Example:

LRUCache cache = new LRUCache( 2 /* capacity */ );

cache.put(1, 1);
cache.put(2, 2);
cache.get(1);       // returns 1
cache.put(3, 3);    // evicts key 2
cache.get(2);       // returns -1 (not found)
cache.put(4, 4);    // evicts key 1
cache.get(1);       // returns -1 (not found)
cache.get(3);       // returns 3
cache.get(4);       // returns 4

#solution 1: head, tail
class LRUCache {
    private class Node{
        int key;
        int val;
        Node prev;
        Node next;
        public Node(int val){
            this.val = val;
        }
    }
    
    private Map<Integer,Node> map = new HashMap<>();
    private Node head, tail;
    private int capacity;
    
    public LRUCache(int capacity) {
        this.capacity = capacity;
        head = new Node(0);
        tail = new Node(0);
        head.prev = null;
        head.next = tail;
        tail.prev = head;
        tail.next = null;
    }
    
    public int get(int key) {
        if(map.containsKey(key)){
            Node node = map.get(key);
            moveToTop(node);
            return node.val;
            
        }else{
            return -1;
        }
    }
    
    public void put(int key, int value) {
        Node node = map.get(key);
        if(node != null){
            node.val = value;
            moveToTop(node);
        }else{
            evict_if_applicable();
            node = new Node(value);
            node.key = key;
            map.put(key,node);
            addToTop(node);
        }
    }
    
    private void moveToTop(Node curr){
        deleteNode(curr);
        addToTop(curr);
    }
    private void deleteNode(Node curr){
        Node prev = curr.prev;
        Node next = curr.next;
        prev.next = next;
        next.prev = prev;
    }
    
    private void addToTop(Node curr){
        Node headNext = head.next;
        headNext.prev = curr;
        head.next = curr;
        curr.prev= head;
        curr.next = headNext;
    }
    
    private void evict_if_applicable(){
            if(map.size()>= capacity){
                Node last = tail.prev;
                deleteNode(last);
                map.remove(last.key);
            }
    }
}

/**
 * Your LRUCache object will be instantiated and called as such:
 * LRUCache obj = new LRUCache(capacity);
 * int param_1 = obj.get(key);
 * obj.put(key,value);
 */

solution 2: linkedList
class LRUCache {
    private class Node{
        int key;
        int val;
        
        public Node(int key, int val){
            this.key = key;
            this.val = val;
        }
    }
    
    Map<Integer, Node> cache;
    LinkedList<Node> cache_values;
    int capacity;
    
    public LRUCache(int capacity) {
        cache = new HashMap<>(capacity);
        cache_values = new LinkedList<>();
        this.capacity = capacity;
    }
    
    public int get(int key) {
        if(!cache.containsKey(key)){
            return -1;
        }
        
        Node node = cache.get(key);
        cache_values.remove(node);
        cache_values.addFirst(node);
        return node.val;
        
    }
    
    public void put(int key, int value) {
        Node node = cache.get(key);
        
        if(node == null){
            evictIfApplicable();
            node = new Node(key, value);
            cache.put(key,node);
            cache_values.addFirst(node);
        }else{
            node.val = value;
            cache_values.remove(node);
            cache_values.addFirst(node);
        }
    }
    
    private void evictIfApplicable(){
        if(cache.size() >= capacity){
            Node last = cache_values.removeLast();
            cache.remove(last.key);
        }
    }
}

/**
 * Your LRUCache object will be instantiated and called as such:
 * LRUCache obj = new LRUCache(capacity);
 * int param_1 = obj.get(key);
 * obj.put(key,value);
 */
