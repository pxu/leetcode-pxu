Description
Given a non-empty binary search tree and a target value, find the value in the BST that is closest to the target.

Given target value is a floating point.
You are guaranteed to have only one unique value in the BST that is closest to the target.
Have you met this question in a real interview?  
Example
Given root = {1}, target = 4.428571, return 1.


Solution 1: BST
/**
 * Definition of TreeNode:
 * public class TreeNode {
 *     public int val;
 *     public TreeNode left, right;
 *     public TreeNode(int val) {
 *         this.val = val;
 *         this.left = this.right = null;
 *     }
 * }
 */

public class Solution {
    /**
     * @param root: the given BST
     * @param target: the given target
     * @return: the value in the BST that is closest to the target
     */
    public int closestValue(TreeNode root, double target) {
        // write your code here
        double diff = Double.MAX_VALUE;
        int res = root.val;
        TreeNode curr = root;
        while(curr != null){
            
            if(diff > Math.abs(curr.val - target)){
                diff = Math.abs(curr.val - target);
                res = curr.val;
            }
            
            if(curr.val > target){
                curr = curr.left;
            }else if(curr.val < target){
                curr = curr.right;
            }else{
                return curr.val;
            }
            
        }
        
        return res;
    }
}



Solution: DFS - not using the bst feature
/**
 * Definition of TreeNode:
 * public class TreeNode {
 *     public int val;
 *     public TreeNode left, right;
 *     public TreeNode(int val) {
 *         this.val = val;
 *         this.left = this.right = null;
 *     }
 * }
 */

public class Solution {
    /**
     * @param root: the given BST
     * @param target: the given target
     * @return: the value in the BST that is closest to the target
     */
    public int closestValue(TreeNode root, double target) {
        // write your code here
        double diff = Math.abs(target - root.val);
        int res = root.val;
        
        Stack<TreeNode> stack = new Stack<>();
        stack.push(root);
        
        while(!stack.isEmpty()){
            TreeNode curr = stack.pop();
            
            if(diff > Math.abs(curr.val - target)){
                diff = Math.abs(curr.val - target);
                res = curr.val;
            }
            
            if(curr.left != null) stack.push(curr.left);
            if(curr.right !=null) stack.push(curr.right);
        }
        
        return res;
        
    }
}
