Given a triangle, find the minimum path sum from top to bottom. Each step you may move to adjacent numbers on the row below.

For example, given the following triangle

[
     [2],
    [3,4],
   [6,5,7],
  [4,1,8,3]
]
The minimum path sum from top to bottom is 11 (i.e., 2 + 3 + 5 + 1 = 11).

Note:

Bonus point if you are able to do this using only O(n) extra space, where n is the total number of rows in the triangle.

class Solution {
    public int minimumTotal(List<List<Integer>> triangle) {
        
        int rows = triangle.size();
        int cols = rows;
        int dp[][] = new int[rows][cols];
        dp[0][0] = triangle.get(0).get(0);
        for(int i = 1; i < rows; i++){
            dp[i][0] = dp[i-1][0] + triangle.get(i).get(0);
            dp[i][i] = dp[i-1][i-1] + triangle.get(i).get(i);
        }
        for(int i = 1; i < rows; i++){
            for(int j = 1; j < i; j++){
                dp[i][j] = triangle.get(i).get(j) + Math.min(dp[i-1][j], dp[i-1][j-1]);
            }
        }
        
        int res = Integer.MAX_VALUE;
        for(int i = 0; i < cols; i++){
            res = Math.min(res, dp[rows-1][i]);
        }
        
        return res;
        
        
    }
}
