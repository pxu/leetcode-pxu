Given a triangle, find the minimum path sum from top to bottom. Each step you may move to adjacent numbers on the row below.

For example, given the following triangle

[
     [2],
    [3,4],
   [6,5,7],
  [4,1,8,3]
]
The minimum path sum from top to bottom is 11 (i.e., 2 + 3 + 5 + 1 = 11).

Note:

Bonus point if you are able to do this using only O(n) extra space, where n is the total number of rows in the triangle.

class Solution {
    public int minimumTotal(List<List<Integer>> triangle) {
        
        int rows = triangle.size();
        int cols = rows;
        int dp[][] = new int[rows][cols];
        dp[0][0] = triangle.get(0).get(0);
        for(int i = 1; i < rows; i++){
            dp[i][0] = dp[i-1][0] + triangle.get(i).get(0);
            dp[i][i] = dp[i-1][i-1] + triangle.get(i).get(i);
        }
        for(int i = 1; i < rows; i++){
            for(int j = 1; j < i; j++){
                dp[i][j] = triangle.get(i).get(j) + Math.min(dp[i-1][j], dp[i-1][j-1]);
            }
        }
        
        int res = Integer.MAX_VALUE;
        for(int i = 0; i < cols; i++){
            res = Math.min(res, dp[rows-1][i]);
        }
        
        return res;
        
        
    }
}

这题使用动态规划较为简便。最初的思路为自顶向下，对每一行进行遍历，同时使用一个一维数组dp存储最佳状态的路径和(dp的长度为三角形的层数)。以此类推，最后一层将会记录所有的路径结果，这时只需要对dp进行遍历求出当中的最小值即可。以上面的三角形为例子。当遍历第一行时，dp的存储为2,0,0,0，第二行时状态为2+3=5,2+4=6，第三行为5+6=11,min(5+5,6+5)=10,6+7=12，第四行为15,min(11+1,10+1)=11,min(10+8,12+8=20)=18,16。只需要遍历最后一行即可求出最小路径和11。

class Solution {
    public int minimumTotal(List<List<Integer>> triangle) {
       int size = triangle.size();
       int [] dp = new int[size + 1];
       
       for(int i = size -1; i>=0 ; i--){
           for(int j = 0; j < triangle.get(i).size(); j++){
               dp[j] = triangle.get(i).get(j) + Math.min(dp[j], dp[j+1]);
           }
       }
        
        return dp[0];
    }
}
