314. Binary Tree Vertical Order Traversal

Given a binary tree, return the vertical order traversal of its nodes' values. (ie, from top to bottom, column by column).

If two nodes are in the same row and column, the order should be from left to right.

Examples 1:

Input: [3,9,20,null,null,15,7]

   3
  /\
 /  \
 9  20
    /\
   /  \
  15   7 

Output:

[
  [9],
  [3,15],
  [20],
  [7]
]
Examples 2:

Input: [3,9,8,4,0,1,7]

     3
    /\
   /  \
   9   8
  /\  /\
 /  \/  \
 4  01   7 

Output:

[
  [4],
  [9],
  [3,0,1],
  [8],
  [7]
]
Examples 3:

Input: [3,9,8,4,0,1,7,null,null,null,2,5] (0's right child is 2 and 1's left child is 5)

     3
    /\
   /  \
   9   8
  /\  /\
 /  \/  \
 4  01   7
    /\
   /  \
   5   2

Output:

[
  [4],
  [9,5],
  [3,0,1],
  [8,2],
  [7]
]

solution: using two queues
/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) { val = x; }
 * }
 */
class Solution {
    private int min = Integer.MAX_VALUE;
    private int max = Integer.MIN_VALUE;
    
    public List<List<Integer>> verticalOrder(TreeNode root) {
        List<List<Integer>> res = new ArrayList<>();
        if(root == null){
            return res;
        }
        
        Map<Integer, List<Integer>> map = new HashMap<>();
        Queue<TreeNode> queue = new LinkedList<>();
        Queue<Integer> cq = new LinkedList<>();
        
        
        queue.add(root);
        cq.add(0);
        
        while(!queue.isEmpty()){
            int size = queue.size();
            for(int i = 0; i < size; i++){
                TreeNode curr = queue.remove();
                int col = cq.remove();
                handleMap(map, col, curr.val);
                
                if(curr.left != null){
                    queue.add(curr.left);
                    cq.add(col-1);
                }
                
                if(curr.right != null){
                    queue.add(curr.right);
                    cq.add(col+1);
                }
            }
            
        }
        
        for(int i = min; i <= max; i++){
            res.add(map.get(i));
        }
        
        return res;
    }
    
    private void handleMap(Map<Integer, List<Integer>> map, int col, int nodeVal){
        if(map.containsKey(col)){
            map.get(col).add(nodeVal);
        }else{
            List<Integer> list = new ArrayList<>();
            list.add(nodeVal);
            map.put(col, list);
        }
        
        min = Math.min(min, col);
        max = Math.max(max, col);
    }
}