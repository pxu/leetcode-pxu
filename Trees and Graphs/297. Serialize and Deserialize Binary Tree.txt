Serialization is the process of converting a data structure or object into a sequence of bits so that it can be stored in a file or memory buffer, or transmitted across a network connection link to be reconstructed later in the same or another computer environment.

Design an algorithm to serialize and deserialize a binary tree. There is no restriction on how your serialization/deserialization algorithm should work. You just need to ensure that a binary tree can be serialized to a string and this string can be deserialized to the original tree structure.

Example: 

You may serialize the following tree:

    1
   / \
  2   3
     / \
    4   5

as "[1,2,3,null,null,4,5]"
Clarification: The above format is the same as how LeetCode serializes a binary tree. You do not necessarily need to follow this format, so please be creative and come up with different approaches yourself.

Note: Do not use class member/global/static variables to store states. Your serialize and deserialize algorithms should be stateless.

/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) { val = x; }
 * }
 */
public class Codec {

    // Encodes a tree to a single string.
    public String serialize(TreeNode root) {
        StringBuilder res = new StringBuilder();
        //res.append('[');
        if(root == null){
            return null;
        }    
        Stack<TreeNode> stack = new Stack<>();
        stack.push(root);
        while(!stack.isEmpty()){
            TreeNode currNode = stack.pop();
            if(currNode != null){
                res.append(currNode.val);
                stack.push(currNode.right);
                stack.push(currNode.left);
            }else{
                res.append('#');
            }
            res.append(",");
        }
            
        res.deleteCharAt(res.length()-1);
        //res.append(']'); 
        return res.toString();
    }
    

    // Decodes your encoded data to tree.
    public TreeNode deserialize(String data) {
        //System.out.println("data is:" + data);
        if(data == null){
            return null;
        }
        String nodesStr[] = data.split("\\,");
        Queue<String> queue = new LinkedList<>();
        
        for(String str: nodesStr){
            queue.add(str);
        }
        
        return buildNodes(queue);
        
    }
        
    private TreeNode buildNodes(Queue<String> queue){
            String strVal = queue.remove();
            if("#".equals(strVal)){
                return null;
            }else{
                TreeNode parent = new TreeNode(Integer.valueOf(strVal));
                parent.left = buildNodes(queue);
                parent.right = buildNodes(queue);
                return parent;
            }
    }
}

// Your Codec object will be instantiated and called as such:
// Codec codec = new Codec();
// codec.deserialize(codec.serialize(root));
