Given a collection of distinct integers, return all possible permutations.

Example:

Input: [1,2,3]
Output:
[
  [1,2,3],
  [1,3,2],
  [2,1,3],
  [2,3,1],
  [3,1,2],
  [3,2,1]
]

public class Solution {
    /*
     * @param nums: A list of integers.
     * @return: A list of permutations.
     */
    public List<List<Integer>> permute(int[] nums) {
        // write your code here
        List<List<Integer>> res = new ArrayList<>();
        if(nums == null || nums.length == 0){
            res.add(new ArrayList<>());
            return res;
        }
        
        boolean used[] = new boolean[nums.length];
        
        backtrack(res, new ArrayList<Integer>(), nums, used);
        
        return res;
    }
    
    public void backtrack(List<List<Integer>> res, List<Integer> currList, int[] nums, boolean[] used){
        if(currList.size() == nums.length){
            res.add(new ArrayList<>(currList));
        }else{
            for(int i = 0; i < nums.length; i++){
                if(used[i]){
                  continue;
                }
                used[i] = true;
                currList.add(nums[i]);
                backtrack(res, currList, nums, used);
                currList.remove(currList.size()-1);
                used[i] = false;
                
            }
        }
        
        
    }
}
