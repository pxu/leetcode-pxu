Given a 2D board and a word, find if the word exists in the grid.

The word can be constructed from letters of sequentially adjacent cell, where "adjacent" cells are those horizontally or vertically neighboring. The same letter cell may not be used more than once.

Example:

board =
[
  ['A','B','C','E'],
  ['S','F','C','S'],
  ['A','D','E','E']
]

Given word = "ABCCED", return true.
Given word = "SEE", return true.
Given word = "ABCB", return false.

solution 1: dfs + backtrack (version 1)
class Solution {
    int dirs[][] = {{-1,0},{0,1},{1,0},{0,-1}};
    public boolean exist(char[][] board, String word) {
        if(board == null || board.length == 0) return false;
        if(word == null || word.length() == 0) return true;
        int rows = board.length;
        int cols = board[0].length;
        boolean status[][] = new boolean[rows][cols];
        for(int row = 0; row < rows; row++){
            for(int col = 0; col < cols; col++){
                if(dfs(board, word,status, row, col, 0)){
                    return true;
                }
            }
        }
        
        return false;
    }
    
    public boolean dfs(char[][] board, String word, boolean status[][], int row, int col, int currPos){
        if(currPos == word.length()) return true;
        
        if(row < 0 || row >= board.length || col < 0 || col >= board[0].length || status[row][col]){
            return false;
        }
        
        if(board[row][col] != word.charAt(currPos)) return false;
        
        status[row][col] = true;
        
        for(int dir[]: dirs){
            if(dfs(board, word, status, row + dir[0], col + dir[1], currPos+1)){
                return true;
            }
        }
        status[row][col] = false;
        return false;
    }
}

solution 1: dfs + backtrack

class Solution {
    int dirs[][] = {{0, -1},{-1,0},{0, 1},{1, 0}};
    
    public boolean exist(char[][] board, String word) {
        if(board == null || board.length == 0 || word == null || word.length() == 0){
            return false;
        }
        int rows = board.length;
        int cols = board[0].length;
        int status[][] = new int[rows][cols];
        
        for(int row = 0; row < rows; row++){
            for(int col = 0; col < cols; col++){

                if(dfs(row, col, rows,cols,board, word,0, status) == true){
                   return true;
               }
                
            }
        }
        
        return false;
    }
    
    private boolean dfs(int row, int col, int rows, int cols, char[][] board, String word, int curr, int status[][]){
        if(curr == word.length()){
            return true;
        }else{
             if(row < 0 || row >= rows || col < 0 || col >= cols){
                return false;
             }
            
             if(status[row][col] == 0 && board[row][col] == word.charAt(curr)){    
                 status[row][col] = 1;
                 for(int dir[]: dirs){
                     int newRow = row + dir[0];
                     int newCol = col + dir[1];
                    
                    if(dfs(newRow, newCol,rows, cols, board, word, curr+1, status)){
                        return true;
                    }
            
                 }
                 status[row][col] = 0;
            }
          
            return false;
        }
    }
}


solution 2: trie
public class Solution {
    
    class Trie{
        Trie children[] = new Trie[256];
        boolean isEnd = false;
    }
    
    Trie root = new Trie();
    
    int dirs[][] = {{-1,0},{0,1},{1,0},{0,-1}};
    
    private void loadTrie(String word){
        Trie curr = root;
        
        for(char c: word.toCharArray()){
            if(curr.children[c] == null){
                curr.children[c] =  new Trie();
            }
            
            curr = curr.children[c];
        }
        
        curr.isEnd = true;
        
    }
    /**
     * @param board: A list of lists of character
     * @param word: A string
     * @return: A boolean
     */
    public boolean exist(char[][] board, String word) {
        // write your code here

        int rows = board.length;
        int cols = board[0].length;
        int status[][] = new int[rows][cols];
        loadTrie(word);
        
        for(int row = 0 ; row < rows ; row++){
            for(int col = 0; col < cols; col++){
                if(dfs(board, root, row,col, status)){
                    return true;
                }
            }
        }

        return false;
    }
    
    public boolean dfs(char[][] board, Trie trie, int row, int col, int status[][]){

        if(row < 0 || row  >=board.length || col < 0 || col >= board[0].length || status[row][col] == 1){
            return false;
        }
        
        char currChar = board[row][col];
        
        if(trie.children[currChar] == null){
            return false;
        }
        
        trie = trie.children[currChar];
        if(trie.isEnd){
            return true;
        }
        
        status[row][col] = 1;
        for(int dir[]: dirs ){
            int newRow = row + dir[0];
            int newCol = col + dir[1];
            
            if(dfs(board, trie, newRow, newCol, status)){
                return true;
            }
            
        }
        status[row][col] = 0;
        
        return false;
        
    }
}
