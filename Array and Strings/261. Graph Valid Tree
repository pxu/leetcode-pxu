261. Graph Valid Tree
Given n nodes labeled from 0 to n-1 and a list of undirected edges (each edge is a pair of nodes), write a function to check whether these edges make up a valid tree.

Example 1:

Input: n = 5, and edges = [[0,1], [0,2], [0,3], [1,4]]
Output: true
Example 2:

Input: n = 5, and edges = [[0,1], [1,2], [2,3], [1,3], [1,4]]
Output: false
Note: you can assume that no duplicate edges will appear in edges. Since all edges are undirected, [0,1] is the same as [1,0] and thus will not appear together in edges.

Solution 1: dfs
class Solution {
    public boolean validTree(int n, int[][] edges) {
        
        if(edges == null){
            return true;
        }
        
        if((n - 1) != edges.length){
            return false;
        }
        
        Map<Integer,List<Integer>> map = new HashMap<>();
        for(int i = 0; i< n; i++){
            map.put(i, new ArrayList<Integer>());
        }
        
        for(int edge[]: edges){
            map.get(edge[0]).add(edge[1]);
            map.get(edge[1]).add(edge[0]);
        }
        
        return dfs(map,n) ;
        
    }
    
    private boolean dfs(Map<Integer,List<Integer>> map, int n){
        int status[] = new int[n];
        Arrays.fill(status, 0);
        
        Stack<Integer> stack = new Stack<>();
        stack.push(0);
        status[0] = 1;
        while(!stack.isEmpty()){
            int curr = stack.pop();
            List<Integer> currList = map.get(curr);
            for(Integer child: currList){
                if(status[child] == 0){
                    stack.push(child);
                    status[child] = 1;
                }else if(status[child] == 1){
                    return false;
                }
                
            }
            
            status[curr] = 2;
            
        }
        
        for(int s: status){
            if(s == 0){
                return false;
            }
        }
        
        return true;
    
        
    }
}

#solution 2: Union Find
class Solution {
    public boolean validTree(int n, int[][] edges) {
        
        if(edges == null){
            return true;
        }
        
        if((n - 1) != edges.length){
            return false;
        }
        
        Map<Integer,List<Integer>> map = new HashMap<>();
        for(int i = 0; i< n; i++){
            map.put(i, new ArrayList<Integer>());
        }
        
        for(int edge[]: edges){
            map.get(edge[0]).add(edge[1]);
            map.get(edge[1]).add(edge[0]);
        }
        
        return dfs(map,n) ;
        
    }
    
    private boolean dfs(Map<Integer,List<Integer>> map, int n){
        int status[] = new int[n];
        Arrays.fill(status, 0);
        
        Stack<Integer> stack = new Stack<>();
        stack.push(0);
        status[0] = 1;
        while(!stack.isEmpty()){
            int curr = stack.pop();
            List<Integer> currList = map.get(curr);
            for(Integer child: currList){
                if(status[child] == 0){
                    stack.push(child);
                    status[child] = 1;
                }else if(status[child] == 1){
                    return false;
                }
                
            }
            
            status[curr] = 2;
            
        }
        
        for(int s: status){
            if(s == 0){
                return false;
            }
        }
        
        return true;
    
        
    }
}
