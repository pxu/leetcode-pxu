98. Validate Binary Search Tree
Given a binary tree, determine if it is a valid binary search tree (BST).

Assume a BST is defined as follows:

The left subtree of a node contains only nodes with keys less than the node's key.
The right subtree of a node contains only nodes with keys greater than the node's key.
Both the left and right subtrees must also be binary search trees.
Example 1:

Input:
    2
   / \
  1   3
Output: true
Example 2:

    5
   / \
  1   4
     / \
    3   6
Output: false
Explanation: The input is: [5,1,4,null,null,3,6]. The root node's value
             is 5 but its right child's value is 4.

solution:
/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) { val = x; }
 * }
 */
 solution 1: min and max check
class Solution {
    public boolean isValidBST(TreeNode root) {
        
        if(root == null){
            return true;
        }
        
        return validate(root, null, null);
        
    }
    
    public boolean validate(TreeNode root, Integer min, Integer max){
        if(root == null){
            return true;
        }
        
        return (min == null || root.val > min) && (max == null || root.val < max) && validate(root.left, min, root.val) && 
            validate(root.right, root.val, max);
        
    }
}

#solution 2: inorder search with recursion
/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) { val = x; }
 * }
 */
class Solution {
    TreeNode prev;
    
    public boolean isValidBST(TreeNode root) {
        return inOrder(root);
    }
    
    private boolean inOrder(TreeNode root){
        if(root == null){
            return true;
        }
        
        if(inOrder(root.left) == false){
            return false;
        }
        
        if(prev == null){
            prev = root;
        }else{
            if(root.val <= prev.val){
                return false;
            }else{
                prev = root;
            }
        }
        
        if(inOrder(root.right) == false){
            return false;
        }
        
        return true;
        
    }
}

#solution 3: in order search with iteration
/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) { val = x; }
 * }
 */
class Solution {
    TreeNode prev;
    
    public boolean isValidBST(TreeNode root) {
        return inOrder(root);
    }
    
    private boolean inOrder(TreeNode root){
        if(root == null){
            return true;
        }
        
        Stack<TreeNode> stack = new Stack<>();
        TreeNode curr = root;
        
        while(!stack.isEmpty() || curr != null){
            while(curr != null){
                stack.push(curr);
                curr = curr.left;
            } 
            
            curr = stack.pop();
            if(prev == null){
                prev = curr;
            }else{
                if(prev.val >= curr.val){
                    return false;
                }else{
                    prev = curr;
                }
            }
            
            curr = curr.right;
        }
        
        return true;
        
    }
}