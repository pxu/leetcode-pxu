200. Number of Islands
Given a 2d grid map of '1's (land) and '0's (water), count the number of islands. An island is surrounded by water and is formed by connecting adjacent lands horizontally or vertically. You may assume all four edges of the grid are all surrounded by water.

Example 1:

Input:
11110
11010
11000
00000

Output: 1
Example 2:

Input:
11000
11000
00100
00011

Output: 3
solution: dfs and reset 1 to 0
class Solution {
    int dirs[][] = {{0,-1},{-1,0},{0,1},{1,0}};
    
    public int numIslands(char[][] grid) {
        if(grid == null || grid.length == 0){
            return 0;
        }
        
        int count = 0;
        int rows = grid.length;
        int cols = grid[0].length;
        
        for(int row = 0; row < rows; row++){
            for(int col = 0; col < cols; col++){
                if(grid[row][col] == '1'){
                    count++;
                    dfs(grid, row,col, rows, cols);
                }
                
            }
        }
        return count;
    }
    
    private void dfs(char[][] grid, int row, int col, int rows, int cols){
        if(row <0 || row >= rows || col < 0 || col >= cols || grid[row][col] == '0'){
            return;
        }
        
        grid[row][col] = '0';
        
        for(int dir[]: dirs){
            dfs(grid, row+ dir[0], col + dir[1], rows, cols);
        }
        
    }
}

#solution 2: union find
class Solution {
    
    class UnionFind{
        int parents[];
        
        public UnionFind(int m, int n){
            parents = new int[m*n];
            
            for(int i = 0; i < m ; i++){
                for(int j = 0; j < n; j++){
                    parents[n*i+j] = n*i +j;
                }
            }
        }
        
        public int find(int x){
            if(parents[x] != x){
                parents[x] = find(parents[x]);
            }
            
            return parents[x];
        }
        
        public boolean union(int x, int y){
            int px = find(x);
            int py = find(y);
            
            if(px == py){
                return false;
            }
            
            parents[py] = px;
            return true;
        }
    }
    
    int dirs[][] = {{0,-1},{-1,0},{0,1},{1,0}};
    
    public int numIslands(char[][] grid) {
        if(grid == null || grid.length == 0){
            return 0;
        }
        
        
        int rows = grid.length;
        int cols = grid[0].length;
        int count = 0;
        
        for(int row = 0; row < rows; row++){
            for(int col = 0; col < cols; col++){
                 if(grid[row][col] == '1'){
                     count++;
                 }
            }
        }
       
        UnionFind uf = new UnionFind(rows, cols);
        
        for(int row = 0; row < rows; row++){
            for(int col = 0; col < cols; col++){
                
                if(grid[row][col] == '1'){
                    for(int dir[]: dirs){
                        int newRow = row + dir[0];
                        int newCol = col + dir[1];
                        if(newRow >= 0 && newRow< rows && newCol>=0 && newCol < cols && grid[newRow][newCol] == '1'){
                            if(uf.union(cols*newRow + newCol,cols*row + col)){
                                count--;
                            }
                           
                        }
                    }
                }
                
            }
        }
        return count;
    }
    
}

