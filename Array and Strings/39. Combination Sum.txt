39. Combination Sum
Given a set of candidate numbers (candidates) (without duplicates) and a target number (target), find all unique combinations in candidates where the candidate numbers sums to target.

The same repeated number may be chosen from candidates unlimited number of times.

Note:

All numbers (including target) will be positive integers.
The solution set must not contain duplicate combinations.
Example 1:

Input: candidates = [2,3,6,7], target = 7,
A solution set is:
[
  [7],
  [2,2,3]
]
Example 2:

Input: candidates = [2,3,5], target = 8,
A solution set is:
[
  [2,2,2,2],
  [2,3,3],
  [3,5]
]

solution:backtrack
class Solution {
    public List<List<Integer>> combinationSum(int[] candidates, int target) {

        List<List<Integer>> res = new ArrayList<>();
        if(candidates == null || candidates.length == 0) {
            return res;
        }
        backtrack(res, new ArrayList<Integer>(), candidates, 0, target);
        return res;
    }
    
    private void backtrack(List<List<Integer>> res, List<Integer> currList, int candidates[], int pos, int target){
        if(pos >= candidates.length || target < 0){
            return;
        }
        
        if(target == 0){
            res.add(new ArrayList<>(currList));
            return;
        }
        for(int i = pos; i < candidates.length; i++){
            currList.add(candidates[i]);
            backtrack(res, currList, candidates, i, target - candidates[i]);
            currList.remove(currList.size()-1);
        }
        
        
    }
}