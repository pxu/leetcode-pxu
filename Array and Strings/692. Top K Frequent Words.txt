Given a non-empty list of words, return the k most frequent elements.

Your answer should be sorted by frequency from highest to lowest. If two words have the same frequency, then the word with the lower alphabetical order comes first.

Example 1:
Input: ["i", "love", "leetcode", "i", "love", "coding"], k = 2
Output: ["i", "love"]
Explanation: "i" and "love" are the two most frequent words.
    Note that "i" comes before "love" due to a lower alphabetical order.
Example 2:
Input: ["the", "day", "is", "sunny", "the", "the", "the", "sunny", "is", "is"], k = 4
Output: ["the", "is", "sunny", "day"]
Explanation: "the", "is", "sunny" and "day" are the four most frequent words,
    with the number of occurrence being 4, 3, 2 and 1 respectively.
Note:
You may assume k is always valid, 1 ≤ k ≤ number of unique elements.
Input words contain only lowercase letters.
Follow up:
Try to solve it in O(n log k) time and O(n) extra space.


class Solution {
    public List<String> topKFrequent(String[] words, int k) {
        
         List<String> res = new ArrayList<>();
        if(words == null || words.length == 0){
            return res;
        }
        
        Map<String,Integer> wordMap = new HashMap<>();
        
        for(String word: words){
            wordMap.put(word,wordMap.getOrDefault(word,0)+1);
        }
        /**
        he solution is using min-heap, which keeps heap's size to K. With min-heap, the top K elements are
        actually at the bottom of the heap. Hence, at case where a.getValue() == b.getValue(), we want to 
        add "abd" before "abc" into the min-heap, so that when executing line result.add(0, pq.poll().getKey());,
        abc will go before abd in the result. Hope this help!
        **/
        Comparator<String> comparator = new Comparator<String>(){
            @Override
            public int compare(String wf1,String wf2){
                if(wordMap.get(wf1) == wordMap.get(wf2)){
                    return wf2.compareTo(wf1);
                }
                
                return wordMap.get(wf1) - wordMap.get(wf2);
            }
        };
        
        PriorityQueue<String> pq = new PriorityQueue<>(k,comparator);
        
        
        for(Map.Entry<String,Integer> entry: wordMap.entrySet()){
            pq.add(entry.getKey());
            if(pq.size() > k ){
                pq.remove();
            }

        }
       
        while(!pq.isEmpty()){
            res.add(pq.remove());
        }
        Collections.reverse(res);
        return res;
        
    }
                  
  
}
